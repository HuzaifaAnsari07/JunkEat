/**
 * @fileoverview Firestore Security Rules for JunkEats Express.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (profiles, carts, orders) and allows public read access for global data (products, offers).
 * Administrative privileges are granted based on the presence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only by the user themselves.
 * - /users/{userId}/carts/{cartId}: Stores cart data. Accessible only by the user.
 * - /users/{userId}/orders/{orderId}: Stores order data. Accessible only by the user.
 * - /products/{productId}: Stores product information. Publicly readable.
 * - /offers/{offerId}: Stores offer information. Publicly readable.
 * - /roles_admin/{userId}: Indicates admin privileges. The existence of a document grants admin rights.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Products and Offers are publicly readable.
 * - Admin privileges are granted based on document existence in /roles_admin/{userId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information, allowing only the user to read and write their own data.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete, get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user's cart data, allowing only the user to read and write their own cart.
     * @path /users/{userId}/carts/{cartId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete, get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/carts/{cartId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user's order data, allowing only the user to read and write their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete, get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to product information.
     * @path /products/{productId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes to products
     * @principle Provides public read access while restricting writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to offer information.
     * @path /offers/{offerId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes to offers
     * @principle Provides public read access while restricting writes.
     */
    match /offers/{offerId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages admin privileges based on document existence.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get: if isAdmin();
        allow list: if false;

        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the food delivery application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, orders, and carts.
 * Products are publicly readable but not writable by users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /products/{productId}: Stores product information.
 * - /users/{userId}/orders/{orderId}: Stores order information for a specific user.
 * - /users/{userId}/cart: Stores the user's shopping cart.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data, orders, and carts.
 * - Products are publicly readable but only the app backend can manage them (not implemented in these rules).
 * - Listing of user profiles is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The userId is already present in the paths for orders and carts, so no denormalization is needed for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' can create their own profile.
     * @allow (update) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' can update their own profile.
     * @deny (create) User with UID 'attackerId' cannot create a profile with a different userId.
     * @deny (update) User with UID 'attackerId' cannot update another user's profile.
     * @deny (delete) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' cannot delete their profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing of users for privacy

      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to product information, but restricts write access.
     * @path /products/{productId}
     * @allow (get) Any user can read product information.
     * @allow (list) Any user can list products.
     * @deny (create) Users cannot create products.
     * @deny (update) Users cannot update products.
     * @deny (delete) Users cannot delete products.
     * @principle Public read with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Protects user-specific order data. Users can only read and write their own orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' can create an order under their ID.
     * @allow (get) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' can read their own order.
     * @deny (create) User with UID 'attackerId' cannot create an order for another user.
     * @deny (get) User with UID 'attackerId' cannot read another user's order.
     * @deny (update) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' cannot update their order.
     * @deny (delete) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' cannot delete their order.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user's shopping cart. Users can only read and write their own cart.
     * @path /users/{userId}/cart
     * @allow (create) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' can create their cart under their ID.
     * @allow (get) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' can read their own cart.
     * @deny (create) User with UID 'attackerId' cannot create a cart for another user.
     * @deny (get) User with UID 'attackerId' cannot read another user's cart.
     * @deny (update) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' cannot update their cart.
     * @deny (delete) User with UID 'wYzvuY5l9sNQeSgrhE0Mu0hEMy93' cannot delete their cart.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/cart {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}